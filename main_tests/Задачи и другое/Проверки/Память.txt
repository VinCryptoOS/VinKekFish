Выписка из "АлгоритмыПроверки.txt"

На каждую строчку инициализаторов и программы:
0. Состояния объектов
	0. В начале программы и каждого статического и обычного конструктора: в каком состоянии находятся сейчас проинициализированные статически объекты (у тех, у которых много состояний)
		В частности, указатель или ссылка на объект не нулевые? Не освобождены?
	1. В каком состоянии сейчас находятся используемые в данной строке объекты?
	2. Производится ли запись в объект (возможно, где-то внутри)?
		2.1. Если да, то разрешена ли эта запись в этом состоянии (и вообще из этого места)?
	3. Производится ли чтение?
		3.1. Если да, то разрешено ли оно в этом состоянии (и вообще из этого места)?
	4. Производятся ли другие операции с объектом? Разрешены ли они?
	5. Если производится копирование объекта или ссылки, то пометить, что объект имеет копии или копии ссылки
	6. Полное ли копирование производится? Всё ли верно?
	7. Непригодные состояния
		7.0. Все ли созданные объекты переходят в состояние "очищен" и "уничтожен"?
		7.1. Можно ли понять, что объекты находятся в непригодном состоянии (непроинициализирован, очищен, уничтожен)?
		7.2. Деструктор объекта
			0. Деструктор переводит объект в состояние "очищен" или "уничтожен" (с вызовом исключения)?
			1. Верен ли вызов деструктора, если объект уже "очищен" или "уничтожен"?
		7.3. Не производится ли работа с объектом после того, как он удалён?
	8. Все ли созданные объекты проходят полный допустимый или рекомендуемый цикл состояний?
	9. -
	10. Есть ли защита от использования метода в неверном состоянии? Документировано ли предупреждение, если нет
	11. Реализует ли метод те состояния, которые описаны в документации?
		1. Переводит ли он в нужное состояние программу из любого другого доступного состояния?
		2. Как он реагирует на вызов с недопустимым состоянием? Описано ли такое поведение в документации?
		3. Переменные, указанные в документации по состоянию, действительно изменяются так, как указано? (аналогично п. 14)
		4. Вызывает ли он другие методы только в допустимых состояниях?
	12. Что будет при повторном вызове рассматриваемого метода сразу после окончания этого вызова?
	13. При переходе в состояние "очищен" объект должен перезаписывать всю конфиденциальную информацию
	14. Переменные, указывающие на состояние
		14.0. Переменные, указанные в документации по состоянию, действительно изменяются так, как указано?
		14.1. Для одного и того же состояния по всей программе используется одна и та же переменная?
Возникновение ИСКЛЮЧЕНИЙ в программе!!!
В коде пройдены состояния до конечного или до состояния "очищен"

2. Пометить функции, как используемые


Циклы завершаются
