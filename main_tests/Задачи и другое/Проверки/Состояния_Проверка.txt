Проверка начинается с анализа статических конструкторов программы. Анализируется только создание сложных объектов.
Затем проверка переходит к функциям программы (класса) в удобном для анализе порядке.

Если нужно, проверка осуществляется несколькими проходами.

1. Выписать все объекты, которые используются в ходе программы (в проверяемой части, в том числе, в статических методах) либо передаются из-вне.
	0. Все объекты проверяемого класса
	1. Все объекты, которые глобально (вне одной функции) используются проверяемым участком программы
	2. Все объекты, которые локально (внутри функции) используются в программе: пройти по всем функциям и заранее выписать эти объекты в отдельный список, идущий сразу после функции, чтобы потом не забыть
2.
	1. Для всех выписанных объектов указать их начальные состояния, если их сразу можно выяснить (если нет, то это будет выясняться далее в WMv05ZkV8lkD).
	2. Для всех выписанных объектов указать, в каких состояниях они должны быть на входе и выходе из функции, если это требование (отметить, что это требование, а не результат проверки).

LSpqK5mC. Завершающие состояния (проход по всей программе)
	0. Если для объекта нет отдельного списка состояний, использовать следующий
		MCaZG5ctJub4
			0. Не создан
			1. Не инициализирован
			2. Готов к использованию
			3. Не готов к использованию (если такое может быть; в том числе, уничтожен, но доступен)
			4. Очищен
			5. Уничтожен
			6. Ссылка на объект очищена
	Также можно использовать доп. списки
		KmMYNx4twrG9. Не создан - ссылка нулевая / Есть ссылка / Ссылка очищена
		hzc21pUOzxfb. Только для чтения / Допустимы все операции
		NSMdQiQ9Xfbb. Ссылка имеет копии / ссылка не имеет копий
		CYGFmLaJZccb. Копия ссылки должна быть очищена (освобождена) / Копия ссылки не должна быть очищена (освобождена)

	1. Для каждого объекта также необходимо указать
		1. он находится в каких-то списках (в каких именно? Когда произойдёт удаление из списка?)
		2. с него делается зависимая копия (которая не должна изменяться независимо от этого объекта - где эта копия и когда она будет удалена либо потеряет зависимость)
		3. делается копия ссылки (указателя, адреса) на этот объект (где, когда будет обнулена, какая из ссылок - копия, а какая - оригинал [память под оригинал нужно освободить, если это нужно делать вручную])

	2. Если объект подвергается каким-либо ещё внешним операциям, возможно, для него есть отдельная группа состояний. Указать её.
		1. Если объект подвергается фиксированию (если он может быть перемещён в оперативной памяти), то объект нужно проверить на снятие фиксирования.
		2. Если объект является отображением другого объекта, подумать над его состояниями (доступ к файлу) и, возможно, выписать его состояния, если они определены

	ZqYby51y. Все ли выписанные объекты:
		1. Созданы?
		2. Дошли до состояния "Готов к использованию" (если нет, то зачем этот объект нужен?)?
		3. Очищены
		4. Уничтожены (в частности, освобождена память объекта: объект не находится ни в каких списках)
		5. Ссылка на объект очищены

WMv05ZkV8lkD. Состояния внутри функций
	1. В каком состоянии объекты находятся в начале функции?
	2. В каком состоянии объекты находятся в конце функции
	3. Состояния при использовании
		1. В каком состоянии объекты находятся перед использованием?
		2. Допустимо ли это использование в этом состоянии?
		3. В каком состоянии объекты находятся после использования?


